characters = {
    "0" : [16,"b 1308 1401 8 1 0","b 1315 1412 1 12 0","b 1301 1412 1 12 0","b 1308 1423 8 1 0"],
    "1" : [16,"b 1308 1423 8 1 0","b 1308 1412 1 12 0","b 1304.50 1401 4.50 1 0"],
    "2" : [16,"b 1308 1401 8 1 0","b 1308 1423 8 1 0","b 1308 1412 8 1 0","b 1301 1417.50 1 6.50 0","b 1315 1406.50 1 6.50 0"],
    "3" : [16,"b 1308 1401 8 1 0","b 1315 1412 1 12 0","b 1308 1423 8 1 0","b 1308 1412 8 1 0"],
    "4" : [16,"b 1308 1416 8 1 0","b 1313 1412 1 12 0","b 1301 1408.50 1 8.50 0"],
    "5" : [16,"b 1308 1401 8 1 0","b 1308 1423 8 1 0","b 1308 1409 8 1 0","b 1301 1405 1 5 0","b 1315 1416 1 7 0"],
    "6" : [16,"b 1308 1401 8 1 0","b 1308 1423 8 1 0","b 1308 1412 8 1 0","b 1315 1417.50 1 6.50 0","b 1301 1412 1 12 0"],
    "7" : [16,"b 1308 1401 8 1 0","b 1315 1412 1 12 0","b 1311 1412 5 1 0"],
    "8" : [16,"b 1308 1401 8 1 0","b 1315 1412 1 12 0","b 1301 1412 1 12 0","b 1308 1423 8 1 0","b 1308 1412 8 1 0"],
    "9" : [16,"b 1308 1401 8 1 0","b 1315 1412 1 12 0","b 1301 1406.50 1 6.50 0","b 1308 1423 8 1 0","b 1308 1412 8 1 0"],
    "." : [2,"b 1301 1420 1 1 0"],
    "," : [2,"b 1301 1421.50 1 2.50 0"],
    "!" : [2,"b 1301 1407 1 7 0","b 1301 1420 1 1 0"],
    "?" : [11,"b 1304 1412 1 3 0","b 1304 1420 1 1 0","b 1307 1410 4 1 0","b 1310 1404 1 4 0","b 1305.5 1401 5.5 1 0"],
    ":" : [2, "b 1301 1420 1 1 0","b 1301 1414 1 1 0"],
    ";" : [2,"b 1301 1421.50 1 2.50 0","b 1301 1414 1 1 0"],
    "/" : [8,"b 1301 1420.50 1 3.50 0","b 1304 1412 1 4 0","b 1307 1403.50 1 3.50 0"],
    "|" : [2,"b 1301 1412 1 12 0"],
    "'" : [2,"b 1301 1402.50 1 2.50 0"],
    "&" : [14,"b 1301 1418.50 1 2.50 0","b 1305.50 1423 2.50 1 0","b 1304 1414 1 1 0","b 1304 1405 1 1 0","b 1301 1409.50 1 2.50 0","b 1307 1417 1 1 0","b 1310 1420 1 1 0","b 1313 1417 1 1 0","b 1313 1423 1 1 0","b 1307 1409.50 1 2.50 0"],
    "(" : [5,"b 1301 1412 1 9 0","b 1304 1401 1 1 0","b 1304 1423 1 1 0"],
    ")" : [5,"b 1304 1412 1 9 0","b 1301 1401 1 1 0","b 1301 1423 1 1 0"],
    "[" : [5,"b 1301 1412 1 12 0","b 1302.50 1401 2.50 1 0","b 1302.50 1423 2.50 1 0"],
    "]" : [5,"b 1304 1412 1 12 0","b 1302.50 1401 2.50 1 0","b 1302.50 1423 2.50 1 0"],
    "<" : [8,"b 1301 1412 1 1 0","b 1304 1409 1 1 0","b 1307 1406 1 1 0","b 1304 1415 1 1 0","b 1307 1418 1 1 0"],
    ">" : [8,"b 1307 1412 1 1 0","b 1304 1409 1 1 0","b 1301 1406 1 1 0","b 1304 1415 1 1 0","b 1301 1418 1 1 0"],
    "^" : [14,"b 1307 1401 1 1 0","b 1304 1404 1 1 0","b 1301 1407 1 1 0","b 1310 1404 1 1 0","b 1313 1407 1 1 0"],
    "+" : [14,"b 1307 1412 1 7 0","b 1307 1412 7 1 0"],
    "-" : [14,"b 1307 1412 7 1 0"],
    "_" : [16,"b 1308 1423 8 1 0"],
    "=" : [14,"b 1307 1408 7 1 0","b 1307 1416 7 1 0"],
    "*" : [10,"b 1305 1405 1 5 0","b 1301 1403 1 1 0","b 1309 1403 1 1 0","b 1309 1407 1 1 0","b 1301 1407 1 1 0","b 1305 1405 2 2 0"],
    "%" : [14,"b 1301 1422 1 2 0","b 1304 1417 1 2 0","b 1307 1412 1 2 0","b 1310 1407 1 2 0","b 1313 1402 1 2 0","b 1302.50 1402.50 2.50 2.50 0","b 1311.50 1421.50 2.50 2.50 0"],
    "~" : [15,"b 1301 1414 1 1 0","b 1305 1411 2 1 0","b 1310 1414 2 1 0","b 1314 1411 1 1 0"],
    "@" : [16,"b 1301 1412 1 12 0","b 1308 1423 8 1 0","b 1308 1401 8 1 0","b 1315 1409 1 9 0","b 1310 1417 6 1 0","b 1305 1412 1 6 0","b 1308 1407 4 1 0","b 1311 1412 1 6 0"],
    "#" : [14,"b 1304 1412 1 7 0","b 1307 1415 7 1 0","b 1307 1409 7 1 0","b 1310 1412 1 7 0"],
    " " : [16],
    "A" : [16,"b 1301 1412 1 12 0","b 1315 1412 1 12 0","b 1308 1401 8 1 0","b 1308 1412 8 1 0"],
    "B" : [16,"b 1301 1412 1 12 0","b 1315 1406.50 1 3.50 0","b 1306.50 1401 6.50 1 0","b 1306.50 1412 6.50 1 0","b 1306.50 1423 6.50 1 0","b 1315 1417.50 1 3.50 0"],
    "C" : [16,"b 1308 1423 8 1 0","b 1301 1412 1 12 0","b 1308 1401 8 1 0"],
    "D" : [16,"b 1301 1412 1 12 0","b 1315 1412 1 9 0","b 1306.50 1401 6.50 1 0","b 1306.50 1423 6.50 1 0"],
    "E" : [16,"b 1301 1412 1 12 0","b 1308 1412 8 1 0","b 1308 1401 8 1 0","b 1308 1423 8 1 0"],
    "F" : [16,"b 1301 1412 1 12 0","b 1308 1412 8 1 0","b 1308.50 1401 8 1 0"],
    "G" : [16,"b 1312.50 1412 3.50 1 0","b 1308 1401 8 1 0","b 1308 1423 8 1 0","b 1315 1417.50 1 6.50 0","b 1301 1412 1 12 0"],
    "H" : [16,"b 1301 1412 1 12 0","b 1308 1412 8 1 0","b 1315 1412 1 12 0"],
    "I" : [16,"b 1308 1423 8 1 0","b 1308 1412 1 12 0","b 1308 1401 8 1 0"],
    "J" : [16,"b 1304.50 1423 4.50 1 0","b 1308 1412 1 12 0","b 1308 1401 8 1 0"],
    "K" : [16,"b 1301 1412 1 12 0","b 1315 1405 1 5 0","b 1306.50 1412 6.50 1 0","b 1315 1419 1 5 0"],
    "L" : [16,"b 1301 1412 1 12 0","b 1308 1423 8 1 0"],
    "M" : [16,"b 1308 1407 2 1 0","b 1315 1412 1 12 0","b 1301 1412 1 12 0","b 1303 1404 2 1 0","b 1313 1404 2 1 0"],
    "N" : [16,"b 1301 1412 1 12 0","b 1315 1412 1 12 0","b 1303.50 1404 1 1 0","b 1306.50 1407 1 1 0","b 1312.50 1413 1 1 0","b 1309.50 1410 1 1 0"],
    "O" : [16,"b 1301 1412 1 9 0","b 1315 1412 1 9 0","b 1308 1401 5 1 0","b 1308 1423 5 1 0"],
    "P" : [16,"b 1301 1412 1 12 0","b 1315 1406.50 1 6.50 0","b 1308 1412 8 1 0","b 1308 1401 8 1 0"],
    "Q" : [16,"b 1309.50 1423 6.50 1 0","b 1301 1412 1 9 0","b 1308 1401 5 1 0","b 1315 1413.50 1 10.50 0","b 1313 1421 2 2 0","b 1309 1417 1 1 0"],
    "R" : [16,"b 1301 1412 1 12 0","b 1315 1406.50 1 3.50 0","b 1306.50 1401 6.50 1 0","b 1306.50 1412 6.50 1 0","b 1315 1419 1 5 0"],
    "S" : [16,"b 1308 1401 8 1 0","b 1308 1412 8 1 0","b 1308 1423 8 1 0","b 1301 1406.50 1 6.50 0","b 1315 1417.50 1 6.50 0"],
    "T" : [16,"b 1308 1401 8 1 0","b 1308 1412 1 12 0"],
    "U" : [16,"b 1308 1423 8 1 0","b 1315 1412 1 12 0","b 1301 1412 1 12 0"],
    "V" : [16,"b 1308 1423 2 1 0","b 1315 1409 1 9 0","b 1301 1409 1 9 0","b 1304 1420 1 1 0","b 1312 1420 1 1 0"],
    "W" : [16,"b 1308 1417 2 1 0","b 1315 1412 1 12 0","b 1301 1412 1 12 0","b 1303 1420 2 1 0","b 1313 1420 2 1 0"],
    "X" : [16,"b 1301 1403.50 1 3.50 0","b 1304 1409 1 1 0","b 1308 1412 2 1 0","b 1312 1409 1 1 0","b 1304 1415 1 1 0","b 1312 1415 1 1 0","b 1301 1420.50 1 3.50 0","b 1315 1420.50 1 3.50 0","b 1315 1403.50 1 3.50 0"],
    "Y" : [16,"b 1308 1412 5 1 0","b 1301 1405 1 5 0","b 1308 1417.50 1 6.50 0","b 1315 1405 1 5 0"],
    "Z" : [16,"b 1308 1423 8 1 0","b 1301 1420.50 1 3.50 0","b 1315 1403.50 1 3.50 0","b 1308 1401 8 1 0","b 1308 1412 2 1 0","b 1312 1409 1 1 0","b 1304 1415 1 1 0"],
    "`PI`" : [16,"b 1304 1418 1 7 0","b 1308 1412 8 1 0","b 1312 1418 1 7 0"],
    "`//`" : [16,"b 1308 1412 8 1 0","b 1308 1406 1 1 0","b 1308 1418 1 1 0"],
    "`DG`" : [8,"b 1304 1401 4 1 0","b 1304 1407 4 1 0","b 1301 1404 1 4 0","b 1307 1404 1 4 0"],
    "`B/`" : [8,"b 1307 1420.50 1 3.50 0","b 1304 1412 1 4 0","b 1301 1403.50 1 3.50 0"],
    "`~=`" : [14,"b 1301 1418 1 1 0","b 1305 1415 2 1 0","b 1310 1418 2 1 0","b 1314 1415 1 1 0","b 1301 1409 1 1 0","b 1314 1406 1 1 0","b 1305 1406 2 1 0","b 1310 1409 2 1 0"],
    "`''`" : [8,"b 1301 1402.50 1 2.50 0","b 1307 1402.50 1 2.50 0"],
    "`+-`" : [14,"b 1307 1410 7 1 0","b 1307 1410 1 7 0","b 1307 1420 7 1 0"],
    "`^2`" : [5,"b 1302.50 1401 2.50 1 0","b 1304 1403.50 1 3.50 0","b 1302.50 1406 2.50 1 0","b 1301 1408.50 1 3.50 0","b 1302.50 1411 2.50 1 0"],
    "`^3`" : [5,"b 1302.50 1401 2.50 1 0","b 1304 1406 1 6 0","b 1302.50 1406 2.50 1 0","b 1302.50 1411 2.50 1 0"],
    "`D^`" : [14,"b 1307 1423 1 1 0","b 1304 1420 1 1 0","b 1301 1417 1 1 0","b 1310 1420 1 1 0","b 1313 1417 1 1 0"],
    "`^/`" : [14,"b 1307 1412 1 12 0","b 1304 1420 1 1 0","b 1301 1417 1 1 0","b 1310 1401 4 1 0"],
    "`BX`" : [16,"b 1308 1412 8 12 0"],
    "`BP`" : [8,"b 1304 1412 4 4 0"],
    "`HR`" : [14,"b 1307 1418 1 1 0","b 1307 1415 4 1 0","b 1307 1410.50 7 2.50 0","b 1304 1406 1 1 0","b 1310 1406 1 1 0"],
    "`ST`" : [12,"b 1306 1407.50 1 2.50 0","b 1301 1410 1 1 0","b 1306 1411 4 1 0","b 1302 1418 1 1 0","b 1310 1418 1 1 0","b 1311 1410 1 1 0","b 1304 1415 1 1 0","b 1308 1415 1 1 0","b 1306 1414 2 1 0"],
    "`OO`" : [14,"b 1307 1412 7 2 0","b 1307 1412 2 7 0","b 1307 1412 6 4 0","b 1307 1412 4 6 0","b 1307 1412 5 5 0"],
    "`PS`" : [8,"b 1301 1412 1 7 0","b 1307 1412 1 7 0"],
    "`PL`" : [8,"b 1301 1412 1 7 0","b 1304 1412 1 4 0","b 1307 1412 1 1 0"],
    "`:)`" : [14,"b 1307 1418 4 1 0","b 1301 1415 1 1 0","b 1313 1415 1 1 0","b 1304 1407.50 1 2.50 0","b 1310 1407.50 1 2.50 0"],
    "`:|`" : [14,"b 1307 1418 7 1 0","b 1304 1407.50 1 2.50 0","b 1310 1407.50 1 2.50 0"],
    "`:(`" : [14,"b 1307 1415 4 1 0","b 1301 1418 1 1 0","b 1313 1418 1 1 0","b 1304 1407.50 1 2.50 0","b 1310 1407.50 1 2.50 0"],
    "`;)`" : [14,"b 1307 1418 4 1 0","b 1301 1415 1 1 0","b 1313 1415 1 1 0","b 1309.70 1408 2.50 1 0","b 1304 1407.50 1 2.50 0"],
    "`NL`" : [0],
}

# abcdefghijklmnopqrstuvwxyz0123456789.,:;!?'()[]+-*/%~|#@&<>^`pi``dg``//``b/``~=``+-``^2``^3``^/``''``d^``bp``bx``hr``st``oo``ps``pl``:)``:|``:(``;)``nl`
while True:
    choice = input("Choose an option:\n[0] Convert Text to circloO\n[1] Normal Character List\n[2] Special Character List\n : ")
    if choice == "1":
        print("\nLetters: ABCDEFGHIJKLMNOPQRSTUVWXYZ\nNumbers: 0123456789\nSymbols: .,:;!?'()[]+-*/%~|#@&<>^\n")
    elif choice == "2":
        print("Special characters may not be on a keyboard and must have a two character code surrounded by ` to function.\n`PI` = Pi\n`DG` = Degree Symbol\n`//` = Division Symbol\n`B/` = Backslash")
        print("`~=` = Approximately Equal\n`+-` = Plus or Minus\n`^2` = Squared\n`^3` = Cubed\n`^/` = Square Root\n`''` = Speech Mark\n`D^` = Down Arrow\n`BP` = Bullet Point\n`BX` = Solid Box")
        print("`HR` = Heart\n`ST` = Star\n`OO` = Circle\n`PS` = Pause\n`PL` = Play\n`:)` = Smile\n`:|` = Neutral Face\n`:(` = Frown\n`;)` = Wink\n`NL` = Force New Line\n")
    elif choice == "0":
        translate = input("Text to Input: ")
        xstart = int(input("Start X Pos: "))
        xend = int(input("New Line X Pos: "))
        ystart = int(input("Start Y Pos: "))
        size = int(input("Size (default = 1): "))
        datanum = int(input("Start Number in File: "))
        mono = input("Monospace (Y/N): ")
        if mono == "y" or mono == "Y":
            mono = True
        else:
            mono = False
        shapestomake = []
        xbegin = xstart
        closed = True
        charnum = 0
        while charnum < len(translate):
            char = translate[charnum]
            if char == "`" and len(translate) > (charnum + 3): # special character
                if translate[charnum + 3] == "`":
                    char = translate[charnum:charnum+4]
                    charnum += 3
            lettershape = characters[char.upper()] # get shapes for character
            shapenum = 0
            for shape in lettershape:
                if type(shape) == int:
                    width = shape
                    if mono and width < 16:
                        xstart += (8 - width / 2) * size
                else:
                    coordword = []
                    lastwordend = 0
                    for letter in range(len(shape)): # split shape to words
                        if shape[letter] == " ":
                            coordword.append(shape[lastwordend:letter])
                            lastwordend = letter + 1
                    coordword.append(shape[lastwordend:len(shape)])
                    if coordword[0] == "b":
                        coordword[1] = float(coordword[1])-float(coordword[3]) #repos coord start to topleft
                        coordword[2] = float(coordword[2])-float(coordword[4])
                        coordword[3] = (float(coordword[3]) * 2 + 1) * size - 1
                        coordword[4] = (float(coordword[4]) * 2 + 1) * size - 1
                        coordword[1] = (coordword[1] - 1300) * size + xstart #reset coord, resize, repos to next char
                        coordword[2] = (coordword[2] - 1400) * size + ystart
                        coordword[3] = coordword[3] / 2
                        coordword[4] = coordword[4] / 2
                        coordword[1] = coordword[1] + coordword[3]
                        coordword[2] = coordword[2] + coordword[4]
                    for valueindex in range(len(coordword)):
                        num = coordword[valueindex]
                        if str(num)[len(str(num))-2:] == ".0":
                            coordword[valueindex] = str(num)[:len(str(num))-2] # remove decimal on floats
                    shapestomake.append(str(coordword))
                shapenum += 1
            if xstart > xend or char.upper() == "`NL`": # newline
                xstart = xbegin
                ystart += 28 * size
            else:
                if mono and width < 16:
                    xstart += (20 - 8 + width / 2) * size
                else:
                    xstart += (width + 4) * size
            charnum += 1
        for shapenum in range(len(shapestomake)):
            for cleanchar in "'[],":
                shapestomake[shapenum] = shapestomake[shapenum].replace(cleanchar,"")
        for shape in shapestomake:
            print(shape)
            print("< " + str(datanum))
            datanum += 1
        input()
